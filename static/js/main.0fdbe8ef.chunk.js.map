{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","img","ingredients","className","style","recipe","map","ingredient","text","image","src","alt","App","useState","setRecipe","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","type","name","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6QAkBeA,EAfA,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,IAAIC,EAAiB,EAAjBA,YAChC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,6BAAKN,IACL,6BACCG,EAAYI,KAAI,SAAAC,GAAU,OAEvB,mCAAMA,EAAWC,aAGrB,4BAAIR,IACJ,qBAAKG,UAAWC,IAAMK,MAAOC,IAAKT,EAAKU,IAAI,SC4CxCC,G,cArDJ,WACT,IADa,EAISC,mBAAS,IAJlB,mBAITR,EAJS,KAIFS,EAJE,OAKSD,mBAAS,IALlB,mBAKTE,EALS,KAKFC,EALE,OAMOH,mBAAS,WANhB,mBAMTI,EANS,KAMHC,EANG,KAOdC,qBAAU,WACXC,MACG,CAACH,IAGH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,oCAAD,OAAqCL,EAArC,mBAZf,WAYe,oBAV9B,mCAU8B,MADV,cACXM,EADW,gBAECA,EAASC,OAFV,OAEXC,EAFW,OAGjBC,QAAQC,IAAIF,GACZX,EAAUW,EAAKG,MACfF,QAAQC,IAAIF,EAAKG,MALA,2CAAH,qDAiBf,OACE,sBAAKzB,UAAU,MAAf,UACA,uBAAM0B,SAPQ,SAACC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAIkBb,UAAU,cAArC,UACF,uBAAOA,UAAU,aAAa6B,KAAK,OAAOC,KAAK,OAAOC,MAAOnB,EAAQoB,SAZnD,SAACL,GAClBd,EAAUc,EAAEM,OAAOF,UAapB,wBAAQF,KAAK,SAAS7B,UAAU,gBAAhC,uBAGA,qBAAKA,UAAU,SAAf,SACDE,EAAOC,KAAI,SAAAD,GAAM,OAChB,cAAC,EAAD,CAAmCN,MAAOM,EAAOA,OAAOgC,MACxDrC,SAAUK,EAAOA,OAAOL,SACtBC,IAAKI,EAAOA,OAAOI,MACnBP,YAAaG,EAAOA,OAAOH,aAHfG,EAAOA,OAAOgC,iBChCfC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,mBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.0fdbe8ef.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport style from './recipe.module.css'\r\nconst Recipe = ({title,calories,img,ingredients}) => {\r\n    return (\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ul>\r\n            {ingredients.map(ingredient=>(\r\n\r\n                <li> {ingredient.text}</li>\r\n            ))}\r\n            </ul>\r\n            <p>{calories}</p>\r\n            <img className={style.image} src={img} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\nexport default Recipe;\r\n","import React ,{useEffect,useState} from 'react'\nimport Recipe from './Recipe'\nimport './App.css';\nimport { getSuggestedQuery } from '@testing-library/dom';\n\nconst App =()=>{\n  const APP_ID='a21753ae'; \n  const APP_KEY=\n'352167e3040a180001a3987677135c41';\nconst[recipe,setRecipe]=useState([]);\nconst[search,setSearch]=useState('');\nconst[query,setQuery]=useState('chicken');\n useEffect(()=>{\ngetRecipes()\n },[query]);\n\n\n const getRecipes = async () =>{\n   const response= await fetch(` https://api.edamam.com/search?q=${query}&app_id=${ APP_ID }&app_key=${APP_KEY} `);\n   const data= await response.json();\n   console.log(data);\n   setRecipe(data.hits);\n   console.log(data.hits);\n   \n };\n const updateSearch=(e)=>{\n   setSearch(e.target.value);\n }\n\n const getSearch =(e)=>{\n   e.preventDefault();\n   setQuery(search);\n   setSearch(\"\");\n } \n  return (\n    <div className=\"App\">\n    <form onSubmit={getSearch} className=\"search-form\">\n  <input className='search-bar' type=\"text\" name=\"name\" value={search} onChange={updateSearch}/>\n\n  <button type=\"submit\" className='search-button'>search</button>\n    \n  </form>\n  <div className=\"recipe\">\n{recipe.map(recipe=>(\n  <Recipe key={ recipe.recipe.label} title={recipe.recipe.label}\n  calories={recipe.recipe.calories}\n    img={recipe.recipe.image}\n    ingredients={recipe.recipe.ingredients}\n  />\n))}\n </div>\n  </div>\n    \n  );\n} \n\n \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1n7Ru\",\"image\":\"recipe_image__35ut4\"};"],"sourceRoot":""}